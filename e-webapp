#!/usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import os
import shutil
import subprocess
import json
import re
import sys
import cairosvg
from scripts.e_webapp_subfunctions import update_easylist_if_needed, get_webpage_metadata, get_default_icon
from scripts.install_appimage import prepare_appimage_folder, build_and_deploy_appimage, handle_debug
from scripts.install_app import install_app

# Parse command line arguments
parser = argparse.ArgumentParser(description='Build a web Electron wrapper application.')
parser.add_argument('-w', '--webaddress', required=True, help='The web address to wrap')
parser.add_argument('-n', '--appname', required=True, help='The name of the app')
parser.add_argument('-i', '--icon', help='Path to the icon (PNG only)')
parser.add_argument('-t', '--trayicon', default='', help='Path to the tray icon (PNG only, optional)')
parser.add_argument('-u', '--user-agent', choices=['chrome', 'edge', 'safari', 'honest'], default='chrome', help='User agent (optional)')
parser.add_argument('--inject-css', action='store_true', help='Inject custom CSS (boolean, optional)')
parser.add_argument('--inject-js', action='store_true', help='Inject custom JavaScript (boolean, optional)')
parser.add_argument('-b', '--adblocker', action='store_true', help='Enable adblocker (default: disabled)')
parser.add_argument('-m', '--main-menu', action='store_true', default=False, help='Hide main app menu, unhide with Alt. (default: visible)')
parser.add_argument('-c', '--context-menu', action='store_true', default=True, help='Disable context menu (default: enabled)')
parser.add_argument('-s', '--single-instance', action='store_true', help='Enable single instance (boolean, optional)')
parser.add_argument('--wayland', action='store_true', help='Force Wayland window rendering')
parser.add_argument('--install-appimage', action='store_true', help='Build and install the AppImage and desktop file (Linux only)')
parser.add_argument('--install', action='store_true', help='Install the app and desktop file')
parser.add_argument('--debug', action='store_true', default=False, help='Keep {appName} build directory for debugging')
parser.add_argument('-e', '--electron-version', help='Specify the Electron version to install')


###################
# PRELOAD FUNCTIONS AND SCRIPTS
#####

args = parser.parse_args()

# Cleanup App name
appname_processed = args.appname.split(' - ')[0]
words = appname_processed.split()
if len(words) > 3:
    appname_processed = ' '.join(words[:3])
appname_processed = appname_processed.replace(' ', '_')
appname_processed = re.sub(r'[^\w-]', '', appname_processed)
args.appname = appname_processed

update_easylist_if_needed()                 # update easylist.txt file if older than 10 days
get_webpage_metadata(args.webaddress)       # get metadata

###################
# BUILDING ELECTRON APP
#####

# Define directories
electron_dir = os.path.dirname(os.path.abspath(__file__))
home_dir = os.environ.get('HOME')
app_dir = os.path.join(electron_dir, 'apps', args.appname.lower())
resources_dir = os.path.join(electron_dir, 'resources')
node_modules_path = os.path.join(electron_dir, 'node_modules')

# npm check logic
def check_npm():
    return shutil.which('npm') is not None

def check_toolbox_npm():
    try:
        result = subprocess.run(['toolbox', 'run', 'which', 'npm'], stdout=subprocess.PIPE)
        return result.returncode == 0
    except Exception:
        return False

# Check if the 'node_modules' folder does not exist
if not os.path.exists(node_modules_path):
    print("electron directory not found. First time run? Installing necessary packages...")
    electron_version = f"@{args.electron_version}" if args.electron_version else "@latest"
    npm_commands = [
        f"npm install electron{electron_version} --save-dev",
        "npm install electron-builder --save-dev",
        "npm install --save electron-window-state",
        "npm install --save @ghostery/adblocker-electron"
    ]
    
    if check_npm():
        print("npm exists on host system.")
    elif check_toolbox_npm():
        print("npm exists in toolbox.")
        npm_commands = ["toolbox run " + cmd for cmd in npm_commands]
    else:
        print("npm does not exist on host system or in toolbox. Please install npm and nodejs.")
        exit(1)

    for cmd in npm_commands:
        subprocess.run(cmd, shell=True, check=True)
    print("Necessary npm packages have been installed.")

# Create or reset the app directory
if os.path.exists(app_dir):
    shutil.rmtree(app_dir)
os.makedirs(app_dir)

# Create symlinks to 'node_modules' and 'resources'
for folder in ['node_modules', 'resources', 'scripts']:
    src = os.path.join('..', '..', folder)
    dst = os.path.join(app_dir, folder)
    os.symlink(src, dst)

# Copy necessary files
for file in ['package-lock.json', 'package.json']:
    src = os.path.join(electron_dir, file)

    # Check if source file exists before copying
    if not os.path.exists(src):
        print(f"Error: Required file '{file}' not found in {electron_dir}.")
        sys.exit("No package.json is found. Exiting...")
    shutil.copy(src, app_dir)

src = os.path.join(electron_dir, 'src', 'main', 'index.js')

# Check if source file exists before copying
if not os.path.exists(src):
    print(f"Error: Required file index.js not found.")
    sys.exit("No index.js is found. This is not normal. Exiting...")
shutil.copy(src, app_dir)

# Copy and rename ICONS
# Function to find any icon
def find_any_icon(app_name, search_paths):
    for base_path in search_paths:
        for dirpath, dirnames, files in os.walk(base_path):
            for file in files:
                if file.lower().startswith(app_name.lower()):
                    return os.path.join(dirpath, file)
    return None

# Function to convert to PNG
def convert_to_png(source_path, app_name, app_dir):
    # Ensure target directory exists
    if not os.path.exists(app_dir):
        os.makedirs(app_dir, exist_ok=True)
    target_path = os.path.join(app_dir, "icon.png")
    try:
        cairosvg.svg2png(url=source_path, write_to=target_path)
        print(f"Icon converted to PNG and saved to: {target_path}")
    except Exception as e:
        print(f"Error converting image to PNG: {e}")

# Check if --icon is not provided
if not args.icon:
    app_name_lower = args.appname.lower()  # Assuming preprocessing has been applied
    search_paths = [
        os.path.expanduser("~/.local/share/icons/"),
        "/usr/share/icons/hicolor/512x512/apps/",
        "/usr/share/icons/hicolor/256x256/apps/",
        "/usr/share/icons/hicolor/128x128/apps/",
        "/usr/share/icons/hicolor/64x64/apps/",
        "/usr/share/icons/hicolor/48x48/apps/",
        "/usr/share/pixmaps/"
    ]
    found_icon_path = find_any_icon(app_name_lower, search_paths)
    if found_icon_path:
        print(f"Icon found: {found_icon_path}")
        if not found_icon_path.endswith('.png'):
            # Convert to PNG if necessary. Ensure app_dir is defined as your app's directory path
            convert_to_png(found_icon_path, app_name_lower, app_dir)
        else:
            # If it's already a PNG, just copy it to the desired location
            target_icon_path = os.path.join(app_dir, f"{app_name_lower}/icon.png")
            shutil.copy(found_icon_path, target_icon_path)
            print(f"Icon copied to: {target_icon_path}")
    else:
        print("Icon not found on the host machine.")
        # Try to get icon from web or copy default from templates
        get_default_icon(electron_dir, app_dir, resources_dir)
else:
    # Logic to handle a manually provided icon path
    # For example, copying the specified icon to the app's directory
    if os.path.isfile(args.icon):
        shutil.copy(args.icon, os.path.join(app_dir, 'icon.png'))
        print(f"Manually specified icon copied to: {os.path.join(app_dir, 'icon.png')}")
    else:
        print("Specified icon path does not exist.")

if args.trayicon:
    shutil.copy(args.trayicon, os.path.join(app_dir, 'trayicon.png'))

# Generate config.js that will be loaded by index.js during electron build
config_template = """
module.exports = {{
    webPath: '{webaddress}',
    appName: '{appname}',
    appIcon: 'icon.png',
    trayIconName: '{trayicon}',
    mainMenuHidden: {main_menu},
    shouldShowContextMenu: {context_menu},
    enableAdBlocker: {adblocker},
    enforceSingleInstance: {single_instance},
    injectCustomCSS: {inject_css},
    injectCustomJS: {inject_js},
    userAgentString: '{user_agent}'
}};
"""

config_content = config_template.format(
    webaddress=args.webaddress,
    appname=args.appname,
    trayicon='trayicon.png' if args.trayicon else '',
    main_menu=str(args.main_menu).lower(),
    context_menu=str(args.context_menu).lower(),
    adblocker=str(args.adblocker).lower(),
    single_instance=str(args.single_instance).lower(),
    inject_css=str(args.inject_css).lower(),
    inject_js=str(args.inject_js).lower(),
    user_agent=args.user_agent
)

with open(os.path.join(app_dir, 'config.js'), 'w') as config_file:
    config_file.write(config_content)

# Load and update package.json
package_json_path = os.path.join(app_dir, 'package.json')
with open(package_json_path, 'r') as file:
    package_data = json.load(file)

    # Update values as required
    package_data['name'] = args.appname
    package_data['description'] = f"{args.appname} web client built with electron"
    package_data['version'] = "1.0.0"
    package_data['main'] = "index.js"
    package_data['scripts'] = {
        "pack": "electron-builder --dir",
        "start": "electron ."
    }
    package_data['author'] = "Arnis Kemlers"
    package_data['license'] = "MIT"
    package_data['build'] = {
        "appId": f"e-webapp-{args.appname.lower()}",
        "linux": {
            "target": "AppImage",
            "category": "Network"
        },
        "directories": {
            "output": "dist"
        }
    }
# Write the updated data back to package.json
with open(package_json_path, 'w') as file:
    json.dump(package_data, file, indent=2)

# Load and update package-lock.json
package_lock_json_path = os.path.join(app_dir, 'package-lock.json')
with open(package_lock_json_path, 'r') as file:
    package_lock_data = json.load(file)

    # Update values as required
    package_lock_data['name'] = args.appname
    package_lock_data['version'] = "1.0.0"
    if 'packages' in package_lock_data:
        package_lock_data['packages'][""].update({
            "name": args.appname,
            "version": "1.0.0",
            "license": "MIT"
        })

# Write the updated data back to package-lock.json
with open(package_lock_json_path, 'w') as file:
    json.dump(package_lock_data, file, indent=2)

# Function to check if npm command is installed and is executable
def command_exists(cmd):
    return any(os.access(os.path.join(path, cmd), os.X_OK) for path in os.environ["PATH"].split(os.pathsep))

try:
    os.chdir(app_dir)
    if command_exists('npm'):
        # Directly use npm if it's available
        subprocess.run(['npm', 'run', 'pack'], check=True)
    elif command_exists('toolbox'):
        # Check if npm is available inside toolbox
        try:
            subprocess.run(['toolbox', 'run', 'which', 'npm'], check=True)
            # If we get here, npm is available inside toolbox
            subprocess.run(['toolbox', 'run', 'npm', 'run', 'pack'], check=True)
        except subprocess.CalledProcessError:
            # npm is not available inside toolbox
            print("npm is not installed inside toolbox.")
            sys.exit("npm was not found. Please install npm.")
    else:
        # Neither npm nor toolbox with npm is available
        sys.exit("npm was not found. Please install npm.")
    
    print(f"Successfully built the Electron app: {args.appname}")
except subprocess.CalledProcessError as e:
    print(f"Error during build process: {e}")

# Build and deploy AppImage
if args.install_appimage:
    prepare_appimage_folder(args, electron_dir, app_dir, home_dir)
    build_and_deploy_appimage(args, electron_dir, app_dir)

# Install the app and desktop file
if args.install:
    install_app(args, app_dir, home_dir)
    
# Handle debug
handle_debug(args, app_dir)